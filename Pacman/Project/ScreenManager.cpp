#include "ScreenManager.hpp"

Screen::Screen(const int layout_[36][28])
{
	for (int y = 0; y < 36; y++)
	{
		for (int x = 0; x < 28; x++)
		{
			layout[y][x] = layout_[y][x];
		}
	}
}

void Screen::RenderLayout(const Color color_)
{
	for (int y = 0; y < 36; y++)
	{
		for (int x = 0; x < 28; x++)
		{
			Renderer::Instance().DrawSprite(2, Renderer::Instance().SpriteIndexToPosition(2, layout[y][x]), { (float)(x * 8 + 4), (float)(y * 8 + 4) }, color_);
		}
	}
}

ScreenManager::ScreenManager()
{
    int layoutEmpty[36][28] = {
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            };
	int layoutMap[36][28] = {
							{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 10, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 2},
                            {13, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 34},
                            {13, 37, 5, 31, 31, 6, 37, 5, 31, 31, 31, 6, 37, 32, 11, 37, 5, 31, 31, 31, 6, 37, 5, 31, 31, 6, 37, 34},
                            {13, 37, 32, 0, 0, 11, 37, 32, 0, 0, 0, 11, 37, 32, 11, 37, 32, 0, 0, 0, 11, 37, 32, 0, 0, 11, 37, 34},
                            {13, 37, 25, 12, 12, 26, 37, 25, 12, 12, 12, 26, 37, 25, 26, 37, 25, 12, 12, 12, 26, 37, 25, 12, 12, 26, 37, 34},
                            {13, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 34},
                            {13, 37, 5, 31, 31, 6, 37, 5, 6, 37, 5, 31, 31, 31, 31, 31, 31, 6, 37, 5, 6, 37, 5, 31, 31, 6, 37, 34},
                            {13, 37, 25, 12, 12, 26, 37, 32, 11, 37, 25, 12, 12, 4, 3, 12, 12, 26, 37, 32, 11, 37, 25, 12, 12, 26, 37, 34},
                            {13, 37, 37, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 37, 37, 34},
                            {21, 33, 33, 33, 33, 6, 37, 32, 23, 31, 31, 6, 37, 32, 11, 37, 5, 31, 31, 24, 11, 37, 5, 33, 33, 33, 33, 22},
                            {0, 0, 0, 0, 0, 13, 37, 32, 3, 12, 12, 26, 37, 25, 26, 37, 25, 12, 12, 4, 11, 37, 34, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 13, 37, 32, 11, 37, 37, 37, 38, 37, 37, 38, 37, 37, 37, 32, 11, 37, 34, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 13, 37, 32, 11, 37, 15, 33, 18, 37, 37, 17, 33, 16, 37, 32, 11, 37, 34, 0, 0, 0, 0, 0},
                            {14, 14, 14, 14, 14, 26, 37, 25, 26, 37, 34, 37, 37, 37, 37, 37, 37, 13, 37, 25, 26, 37, 25, 14, 14, 14, 14, 14},
                            {39, 39, 39, 37, 37, 37, 37, 37, 37, 37, 34, 37, 37, 37, 37, 37, 37, 13, 37, 37, 37, 37, 37, 37, 37, 39, 39, 39},
                            {33, 33, 33, 33, 33, 6, 37, 5, 6, 37, 34, 37, 37, 37, 37, 37, 37, 13, 37, 5, 6, 37, 5, 33, 33, 33, 33, 33},
                            {0, 0, 0, 0, 0, 13, 37, 32, 11, 37, 35, 14, 14, 14, 14, 14, 14, 36, 37, 32, 11, 37, 34, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 13, 37, 32, 11, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 32, 11, 37, 34, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 13, 37, 32, 11, 37, 5, 31, 31, 31, 31, 31, 31, 6, 37, 32, 11, 37, 34, 0, 0, 0, 0, 0},
                            {1, 14, 14, 14, 14, 26, 37, 25, 26, 37, 25, 12, 12, 4, 3, 12, 12, 26, 37, 25, 26, 37, 25, 14, 14, 14, 14, 2},
                            {13, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 34},
                            {13, 37, 5, 31, 31, 6, 37, 5, 31, 31, 31, 6, 37, 32, 11, 37, 5, 31, 31, 31, 6, 37, 5, 31, 31, 6, 37, 34},
                            {13, 37, 25, 12, 4, 11, 37, 25, 12, 12, 12, 26, 37, 25, 26, 37, 25, 12, 12, 12, 26, 37, 32, 3, 12, 26, 37, 34},
                            {13, 37, 37, 37, 32, 11, 37, 37, 37, 37, 37, 37, 38, 37, 37, 38, 37, 37, 37, 37, 37, 37, 32, 11, 37, 37, 37, 34},
                            {27, 31, 6, 37, 32, 11, 37, 5, 6, 37, 5, 31, 31, 31, 31, 31, 31, 6, 37, 5, 6, 37, 32, 11, 37, 5, 31, 28},
                            {7, 12, 26, 37, 25, 26, 37, 32, 11, 37, 25, 12, 12, 4, 3, 12, 12, 26, 37, 32, 11, 37, 25, 26, 37, 25, 12, 8},
                            {13, 37, 37, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 32, 11, 37, 37, 37, 37, 37, 37, 34},
                            {13, 37, 5, 31, 31, 31, 31, 24, 23, 31, 31, 6, 37, 32, 11, 37, 5, 31, 31, 24, 23, 31, 31, 31, 31, 6, 37, 34},
                            {13, 37, 25, 12, 12, 12, 12, 12, 12, 12, 12, 26, 37, 25, 26, 37, 25, 12, 12, 12, 12, 12, 12, 12, 12, 26, 37, 34},
                            {13, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 34},
                            {21, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 22},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                            {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
						};
    Screen Empty = Screen(layoutEmpty);
    Screen Map = Screen(layoutMap);
    Screens.push_back(Empty);
    Screens.push_back(Map);
}

void ScreenManager::Render(const int index, const Color color_)
{
    Screens[index].RenderLayout(color_);
}

void ScreenManager::Render(const int index, const int color_)
{
	Render(index, color_);
}
